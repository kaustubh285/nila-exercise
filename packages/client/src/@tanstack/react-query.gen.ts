// This file is auto-generated by @hey-api/openapi-ts

import { type Options, getAllProjectsForUserV1, createProjectV1, deleteProjectV1, getProjectByIdV1, createUserV1, loginV1, createTaskV1, deleteTaskV1, updateTaskV1 } from '../sdk.gen';
import { queryOptions, type UseMutationOptions, type DefaultError } from '@tanstack/react-query';
import type { GetAllProjectsForUserV1Data, CreateProjectV1Data, DeleteProjectV1Data, GetProjectByIdV1Data, CreateUserV1Data, LoginV1Data, CreateTaskV1Data, DeleteTaskV1Data, UpdateTaskV1Data } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getAllProjectsForUserV1QueryKey = (options?: Options<GetAllProjectsForUserV1Data>) => createQueryKey('getAllProjectsForUserV1', options);

export const getAllProjectsForUserV1Options = (options?: Options<GetAllProjectsForUserV1Data>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAllProjectsForUserV1({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAllProjectsForUserV1QueryKey(options)
    });
};

export const createProjectV1QueryKey = (options?: Options<CreateProjectV1Data>) => createQueryKey('createProjectV1', options);

export const createProjectV1Options = (options?: Options<CreateProjectV1Data>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createProjectV1({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createProjectV1QueryKey(options)
    });
};

export const createProjectV1Mutation = (options?: Partial<Options<CreateProjectV1Data>>) => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<CreateProjectV1Data>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createProjectV1({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteProjectV1Mutation = (options?: Partial<Options<DeleteProjectV1Data>>) => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<DeleteProjectV1Data>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteProjectV1({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getProjectByIdV1QueryKey = (options?: Options<GetProjectByIdV1Data>) => createQueryKey('getProjectByIdV1', options);

export const getProjectByIdV1Options = (options?: Options<GetProjectByIdV1Data>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getProjectByIdV1({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getProjectByIdV1QueryKey(options)
    });
};

export const createUserV1QueryKey = (options?: Options<CreateUserV1Data>) => createQueryKey('createUserV1', options);

export const createUserV1Options = (options?: Options<CreateUserV1Data>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createUserV1({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createUserV1QueryKey(options)
    });
};

export const createUserV1Mutation = (options?: Partial<Options<CreateUserV1Data>>) => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<CreateUserV1Data>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createUserV1({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const loginV1QueryKey = (options?: Options<LoginV1Data>) => createQueryKey('loginV1', options);

export const loginV1Options = (options?: Options<LoginV1Data>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loginV1({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loginV1QueryKey(options)
    });
};

export const loginV1Mutation = (options?: Partial<Options<LoginV1Data>>) => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<LoginV1Data>> = {
        mutationFn: async (localOptions) => {
            const { data } = await loginV1({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const createTaskV1QueryKey = (options?: Options<CreateTaskV1Data>) => createQueryKey('createTaskV1', options);

export const createTaskV1Options = (options?: Options<CreateTaskV1Data>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createTaskV1({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createTaskV1QueryKey(options)
    });
};

export const createTaskV1Mutation = (options?: Partial<Options<CreateTaskV1Data>>) => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<CreateTaskV1Data>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createTaskV1({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteTaskV1Mutation = (options?: Partial<Options<DeleteTaskV1Data>>) => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<DeleteTaskV1Data>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteTaskV1({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const updateTaskV1Mutation = (options?: Partial<Options<UpdateTaskV1Data>>) => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<UpdateTaskV1Data>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateTaskV1({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};