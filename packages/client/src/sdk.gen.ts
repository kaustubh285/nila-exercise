// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetAllProjectsForUserV1Data, CreateProjectV1Data, DeleteProjectV1Data, GetProjectByIdV1Data, CreateUserV1Data, LoginV1Data, CreateTaskV1Data, DeleteTaskV1Data, UpdateTaskV1Data } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const getAllProjectsForUserV1 = <ThrowOnError extends boolean = false>(options?: Options<GetAllProjectsForUserV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/projects',
        ...options
    });
};

export const createProjectV1 = <ThrowOnError extends boolean = false>(options?: Options<CreateProjectV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/projects',
        ...options
    });
};

export const deleteProjectV1 = <ThrowOnError extends boolean = false>(options?: Options<DeleteProjectV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/projects/{projectId}',
        ...options
    });
};

export const getProjectByIdV1 = <ThrowOnError extends boolean = false>(options?: Options<GetProjectByIdV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/projects/{projectId}',
        ...options
    });
};

export const createUserV1 = <ThrowOnError extends boolean = false>(options?: Options<CreateUserV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/register',
        ...options
    });
};

export const loginV1 = <ThrowOnError extends boolean = false>(options?: Options<LoginV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/login',
        ...options
    });
};

export const createTaskV1 = <ThrowOnError extends boolean = false>(options?: Options<CreateTaskV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/tasks',
        ...options
    });
};

export const deleteTaskV1 = <ThrowOnError extends boolean = false>(options?: Options<DeleteTaskV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/tasks/{taskId}',
        ...options
    });
};

export const updateTaskV1 = <ThrowOnError extends boolean = false>(options?: Options<UpdateTaskV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).patch<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/tasks/{taskId}',
        ...options
    });
};